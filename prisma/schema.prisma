// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  clerkId  String
  email    String
  imageUrl String?
  name     String?

  createdIssues  Issue[]  @relation("Reporter")
  assignedIssues Issue[]  @relation("Assignee")

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Project {
  id             String  @id @default(cuid())
  name           String
  organizationId String
  key            String
  description    String?

  sprints Sprint[]
  issues  Issue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, key])
}

model Sprint {
  id        String       @id @default(cuid())
  name      String       @unique
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  Issue     Issue[]

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id          String        @id @default(cuid())
  title       String
  description String?
  order       Int
  priority    IssuePriority
  status      IssueStatus

  sprintId String?
  sprint   Sprint? @relation(fields: [sprintId], references: [id], onDelete: SetNull)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String
  assignee   User?  @relation("Assignee", fields: [assigneeId], references: [id])

  reporterId String
  reporter   User   @relation("Reporter", fields: [reporterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, order])
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}
